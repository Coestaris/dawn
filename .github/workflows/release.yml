name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-x11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - name: Install global dependencies
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev libx11-dev libgl1-mesa-dev

      - name: Set TAG env (from pushed tag)
        shell: bash
        run: |
          echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TAG_NO_V=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Update version in Cargo.toml
        run: |
          cargo install cargo-edit
          cargo set-version "${{ env.TAG_NO_V }}"

      - name: Build
        run: cargo build --verbose --release

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-x11
          path: target/release/dawn
          retention-days: 5

      - name: Upload assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: target/release/assets.dac
          retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - name: Set TAG env (from pushed tag)
        shell: bash
        run: |
          echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "TAG_NO_V=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Update version in Cargo.toml
        shell: bash
        run: |
          cargo install cargo-edit
          cargo set-version "${{ env.TAG_NO_V }}"

      - name: Build
        run: cargo build --verbose --release --features no_assets

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: target/release/dawn.exe
          retention-days: 5

  create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [build-linux-x11, build-windows]
    steps:
      - name: Set TAG env (from pushed tag)
        shell: bash
        run: echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Download Linux artifact
        uses: actions/download-artifact@v5
        with:
          name: build-linux-x11
          path: ./build-linux-x11

      - name: Download Windows artifact
        uses: actions/download-artifact@v5
        with:
          name: build-windows
          path: ./build-windows

      - name: Download assets artifact
        uses: actions/download-artifact@v5
        with:
          name: assets
          path: ./assets

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload Linux binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-linux-x11/dawn
          asset_name: dawn-${{ env.TAG }}-linux-x11
          asset_content_type: application/octet-stream

      - name: Upload Windows binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-windows/dawn.exe
          asset_name: dawn-${{ env.TAG }}-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload assets to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./assets/assets.dac
          asset_name: assets.dac
          asset_content_type: application/octet-stream