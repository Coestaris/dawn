name: Create Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux-x11:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal
    - name: Cache cargo registry
      uses: Swatinem/rust-cache@v2
    - name: Install global dependencies
      run: sudo apt-get update && sudo apt-get install -y libasound2-dev libx11-dev libgl1-mesa-dev
    - name: Build
      run: cargo build --verbose --release
    - name: Upload artifact
    - uses: actions/upload-artifact@v4
      with:
        name: build-linux-x11
        path: target/release/dawn
        retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal
    - name: Cache cargo registry
      uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --verbose --release
    - name: Upload artifact
    - uses: actions/upload-artifact@v4
      with:
        name: build-windows
        path: target/release/dawn
        retention-days: 5


  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux-x11, build-windows]
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v5
      with:
        name: build-linux-x11
    - name: Download Windows artifact
      uses: actions/download-artifact@v5
      with:
        name: build-windows
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Linux binary to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dawn
        asset_name: dawn-linux-x11
        asset_content_type: application/octet-stream
    - name: Upload Windows binary to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dawn.exe
        asset_name: dawn-windows.exe
        asset_content_type: application/octet-stream

